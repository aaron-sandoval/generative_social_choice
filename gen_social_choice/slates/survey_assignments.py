import json
from pathlib import Path
from dataclasses import dataclass
from typing import List

import pandas as pd

from generative_social_choice.slates.voting_algorithms import (
    VotingAlgorithm,
    RatedVoteCase,
)


@dataclass
class AssignmentResult:
    """
    Result of assignment computation

    # Arguments
    - `slate: List[str]`: List of statement IDs contained in the slate
    - `slate_statements: List[str]`: The statements of the slate in string format, in the same order as `slate`.
    - `agent_ids: List[str]`: Agent IDs of agents included in assignments
    - `assignments: List[str]`: Assignments where `assignments[i]` contains
        the statement ID of the statement the agent with ID `agent_ids[i]` was assigned to
    - `utilities: List[float]`: Utilities of all agents, where `utilities[i]` contains the
        utility which agent with ID `agent_ids[i]` receives from the assigned statement
    """
    slate: List[str]
    slate_statements: List[str]
    agent_ids: List[str]
    assignments: List[str]
    utilities: List[float]

    def to_dict(self):
        return {"slate": self.slate, "slate_statements": self.slate_statements,
                "agent_ids": self.agent_ids, "assignments": self.assignments, "utilities": self.utilities}
    
    def save(self, filepath: Path):
        json.dump(self.to_dict(), open(filepath, "w"))

    @classmethod
    def load(cls, filepath: Path):
        return cls(**json.load(open(filepath, "r")))


def compute_assignments(
        voting_algorithm: VotingAlgorithm,
        utility_matrix_file: Path,
        statement_id_file: Path,
        slate_size: int,
    ) -> AssignmentResult:
    """
    Select a slate of candidates and assign them to the voters.

    # Arguments
    - `voting_algorithm: VotingAlgorithm`: The algorithm to use for assigning voters
    - `utility_matrix_file: Path`: CSV with all utilities, as generated by create_utility_matrix(). Statement IDs
        are used as column names from the second column onwards, the agent IDs are in the first column.
    - `statement_id_file: Path`: CSV file with statement strings for all statement IDs used in the utility matrix
    - `slate_size: int`: The number of candidates to be selected

    # Returns
    `result: AssignmentResult`: The assignments computed by the algorithm, using the format described
        by AssignmentResult
    """
    utilities_df = pd.read_csv(utility_matrix_file, index_col=0)
    statement_df = pd.read_csv(statement_id_file, index_col=0)

    # Utility function to get statements based on IDs (column names in utility df)
    id_to_statement = lambda statement: statement_df.loc[statement]["statement"]

    rated_vote_case = RatedVoteCase(rated_votes=utilities_df, slate_size=slate_size)

    slate, assignments = voting_algorithm.vote(
        rated_vote_case.rated_votes.copy(),  # Voting algorithms might append columns
        rated_vote_case.slate_size,
    )

    # Convert to AssignmentResult format
    agent_ids = assignments["candidate_id"].index.to_list()
    utilities = [float(utilities_df.loc[agent_ids[ix], assignment]) for ix, assignment in enumerate(assignments["candidate_id"].to_list())]
    result = AssignmentResult(
        slate=slate,
        slate_statements=[id_to_statement(statement_id) for statement_id in slate],
        agent_ids=agent_ids,
        assignments=assignments["candidate_id"].to_list(),
        utilities=utilities,
    )

    return result